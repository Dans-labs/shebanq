{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"SHEBANQ Technical documentation \u00b6 What it is, how it is designed, how it works and how it can be installed and maintained. About \u00b6 SHEBANQ is a website built as an application in the Web2Py framework. It uses MySQL databases to store its dynamic data, which is generated by users, and its static data, which consists of the text of the hebrew Bible and linguistic annotations of the ETCBC . The static data is delivered via the BHSA repository, where it arrived through a pipeline ) from the source data as it sits on ETCBC servers. The specialty of SHEBANQ is that it offers users the facility to run queries against the data and to store those queries so theat they can be shared and published. The query engine for this is Emdros which sits on top of MySQL and speaks with it. Shebanq and the pipeline have been constructed using Text-Fabric as the main tool. Quickly jump to a topic below, or use the navigation controls. Topics \u00b6 Elements of the page Installation on personal computers and servers Maintenance","title":"Intro"},{"location":"#shebanq-technical-documentation","text":"What it is, how it is designed, how it works and how it can be installed and maintained.","title":"SHEBANQ Technical documentation"},{"location":"#about","text":"SHEBANQ is a website built as an application in the Web2Py framework. It uses MySQL databases to store its dynamic data, which is generated by users, and its static data, which consists of the text of the hebrew Bible and linguistic annotations of the ETCBC . The static data is delivered via the BHSA repository, where it arrived through a pipeline ) from the source data as it sits on ETCBC servers. The specialty of SHEBANQ is that it offers users the facility to run queries against the data and to store those queries so theat they can be shared and published. The query engine for this is Emdros which sits on top of MySQL and speaks with it. Shebanq and the pipeline have been constructed using Text-Fabric as the main tool. Quickly jump to a topic below, or use the navigation controls.","title":"About"},{"location":"#topics","text":"Elements of the page Installation on personal computers and servers Maintenance","title":"Topics"},{"location":"news/","text":"News \u00b6 2021-10-05 Big update is due. New ETCBC dataversion 2021 Migration to Python3 New versions of Emdros and Web2Py and MySQL Completely refactored codebase: all Python, Javascript and CSS code chopped up in managable chunks. Install and maintenance scripts Mkdocs framework for technical documentation Maintenance documentation written Shebanq software documentation just started See also older news","title":"News"},{"location":"news/#news","text":"2021-10-05 Big update is due. New ETCBC dataversion 2021 Migration to Python3 New versions of Emdros and Web2Py and MySQL Completely refactored codebase: all Python, Javascript and CSS code chopped up in managable chunks. Install and maintenance scripts Mkdocs framework for technical documentation Maintenance documentation written Shebanq software documentation just started See also older news","title":"News"},{"location":"client/","text":"Client \u00b6 This is the part of SHEBANQ that works in the browser. Its main parts are the CSS files Javascript files","title":"Intro"},{"location":"client/#client","text":"This is the part of SHEBANQ that works in the browser. Its main parts are the CSS files Javascript files","title":"Client"},{"location":"client/css/","text":"CSS organization \u00b6 The styling of SHEBANQ is organized in a bunch of CSS files that each take care of a certain aspect of the layout.","title":"CSS"},{"location":"client/css/#css-organization","text":"The styling of SHEBANQ is organized in a bunch of CSS files that each take care of a certain aspect of the layout.","title":"CSS organization"},{"location":"client/js/","text":"Javascript organization \u00b6 The interaction with SHEBANQ is taken care of by a modern Javascript app. SHEBANQ uses vanilla Javascript (ES6 and higher), without any code preprocessing. The Javascript source is directly included by the HTML.","title":"Javascript"},{"location":"client/js/#javascript-organization","text":"The interaction with SHEBANQ is taken care of by a modern Javascript app. SHEBANQ uses vanilla Javascript (ES6 and higher), without any code preprocessing. The Javascript source is directly included by the HTML.","title":"Javascript organization"},{"location":"deploy/computer/","text":"Computer \u00b6 This article describes the installation of SHEBANQ on your computer. This guide is written for macos computers! Linux The macos system offers a unix system under the hood, which is much like linux . Certain elements of the installation are the same under macos , linux PC, and linux server. Windows Although everything that SHEBANQ depends on also runs on Windows, I have never taken the trouble to put the whole process together in a guide, hindered as I am by not having a Windos computer. Especially the step of compiling Emdros might be a serious thing to get going. In the context of your own computer some things will be simpler than on a server. Your computer will serve SHEBANQ in your own browser, not over the internet. Motivation \u00b6 When developing SHEBANQ, the best way to inspect what happens behind the screens is to have it running on your local computer. So it is an integral part of the maintainability of SHEBANQ that you can install it locally. Preparation and information \u00b6 Before the actual installation of SHEBANQ, we need several software components. We describe what they are and what you have to do first. After that we point you to a script that completes the installation. Computer and operating system \u00b6 You have a modern Mac, running Catalina or higher. Commandline tools \u00b6 The key asset is the command-line, and on macos that is offered by the Terminal app. If you are not familiar with that, here is some reading . However, you will be doing deep system things, such as compiling software. For that, you need to boost your command-line by tools provided by Apple. It is easy but not obvious how to get those commandline tools on your computer. Here is a guide . Even here several options are given. From all those options, choose the following: From a command prompt Open the Terminal app on your mac. Give the following command: git This is an advance command, and it will trigger a prompt offering you to download and istall the commandline tools. Do it! It may take 5-10 minutes. After this, you have commands to interact with GitHub, to compile software, etc. Homebrew \u00b6 We need a package manager for macos, in order to install a mysql client later on. Install Homebrew by following the instructions on its home page and then do brew install mysql-client Python \u00b6 You need Python installed, at least 3.6.3. Preferably from python.org . After that, install the markdown module: pip3 install markdown Database \u00b6 We need the MySQL database system. We are very particular about the details of installing and configuring MySQL here. No previous MySQL on your Mac Preferably you do not have already MySQL installed. If you already have MySQL on your computer, backup your databases and remove it. After the install procedure for MySQL, you can import these backups into the new MySQL system. There are several ways to get MySQL, but only one of them works with Emdros , as I found out the hard way! You need to download the community edition . Take care to pick the download that matches the architecture of your mac ( arm64 for the newer macs, x86_64 for the usual Intel macs). and install it in the macos way (clicking on the package in your downloads folder and following instructions). Do not customise anything! And leave the root password empty. The installation process is described here , and it shows where you can control your databases. Shebanq repository \u00b6 The installation script is in the Shebanq repository, so you have to clone the repo first. We assume you do that under a directory github in your home folder. If you do not want that, you can do it somewhere else, but then you have to tweak a setting in a configuration script later. mkdir -p ~/github/etcbc cd ~/github/etcbc git clone https://github.com/etcbc/shebanq cd shebanq/scripts/computer Now we can do work. Finish MySQL configuration \u00b6 In a terminal, do this (still in the same directory as above): ./mysql.sh Then restart the terminal. Then restart the MySQL (via its preference pane in System Preferences). Now your database is fully functional for the purposes of SHEBANQ. Components \u00b6 Before you run the installation script, here is some information about what gets installed. Emdros \u00b6 Emdros is the software that makes the MQL queries possible which are so typical for SHEBANQ. It sits in the middle of your MQL queries and the MySQL database. The software is already packaged in the SHEBANQ repo. The install script will take it out, unpack it, and compile it, a lengthy process. Dynamic data \u00b6 Dynamic data is the data that is accumulated in the database of the website as a consequence of the actions of the users. Think of the user accounts and the saved queries and notes. For the local install of SHEBANQ we start fill the relevant databases with empty data. Static data \u00b6 Static data is the fixed data offered by the ETCBC: the text and linguistic features of the Hebrew Bible in several versions. That data is in the BHSA repository that we clone, and will be imported from there, a lengthy process. Web2py \u00b6 Our web framework is web2py , a Python based system to build web applications. We install it from GitHub, and after that we plug SHEBANQ into it. Web2Py comes with its own local webserver, so we do not have to set up complicated webservers such as Apache. Instead, we can rely on the built-in webserver that comes with Web2py . Run install script \u00b6 In a terminal, do this): cd ~/github/etcbc/shebanq/scripts/computer ./installmacos.sh At the end, the SHEBANQ web server will be started and a first visit to the local SHEBANQ website will be made. Starting and stopping SHEBANQ \u00b6 You stop SHEBANQ by pressing Ctrl + C in the terminal from where you started SHEBANQ. You start SHEBANQ by double-clicking on the file shebanq.command in your home folder, under Applications/SHEBANQ . not the system-wide applications folder Go to your home folder and find an applications folder in it. That is the one that contains SHEBANQ and there you find shebanq.command . shortcut You can drag this file into the side bar of the Finder. That way you have an easy shortcut to the shebanq webapp. Debugging \u00b6 When you browse shebanq, you might see messages in the terminal window, and when you change the Python code in SHEBANQ and add statements that print messages, they will show up here. Updating \u00b6 You can update SHEBANQ by doing this in a terminal cd ~/Applications/SHEBANQ ./update.sh Selective installation \u00b6 You can install individual pieces. View the options of the install script. cd ~/github/etcbc/shebanq/scripts/computer ./installmacos --help","title":"Computer"},{"location":"deploy/computer/#computer","text":"This article describes the installation of SHEBANQ on your computer. This guide is written for macos computers! Linux The macos system offers a unix system under the hood, which is much like linux . Certain elements of the installation are the same under macos , linux PC, and linux server. Windows Although everything that SHEBANQ depends on also runs on Windows, I have never taken the trouble to put the whole process together in a guide, hindered as I am by not having a Windos computer. Especially the step of compiling Emdros might be a serious thing to get going. In the context of your own computer some things will be simpler than on a server. Your computer will serve SHEBANQ in your own browser, not over the internet.","title":"Computer"},{"location":"deploy/computer/#motivation","text":"When developing SHEBANQ, the best way to inspect what happens behind the screens is to have it running on your local computer. So it is an integral part of the maintainability of SHEBANQ that you can install it locally.","title":"Motivation"},{"location":"deploy/computer/#preparation-and-information","text":"Before the actual installation of SHEBANQ, we need several software components. We describe what they are and what you have to do first. After that we point you to a script that completes the installation.","title":"Preparation and information"},{"location":"deploy/computer/#computer-and-operating-system","text":"You have a modern Mac, running Catalina or higher.","title":"Computer and operating system"},{"location":"deploy/computer/#commandline-tools","text":"The key asset is the command-line, and on macos that is offered by the Terminal app. If you are not familiar with that, here is some reading . However, you will be doing deep system things, such as compiling software. For that, you need to boost your command-line by tools provided by Apple. It is easy but not obvious how to get those commandline tools on your computer. Here is a guide . Even here several options are given. From all those options, choose the following: From a command prompt Open the Terminal app on your mac. Give the following command: git This is an advance command, and it will trigger a prompt offering you to download and istall the commandline tools. Do it! It may take 5-10 minutes. After this, you have commands to interact with GitHub, to compile software, etc.","title":"Commandline tools"},{"location":"deploy/computer/#homebrew","text":"We need a package manager for macos, in order to install a mysql client later on. Install Homebrew by following the instructions on its home page and then do brew install mysql-client","title":"Homebrew"},{"location":"deploy/computer/#python","text":"You need Python installed, at least 3.6.3. Preferably from python.org . After that, install the markdown module: pip3 install markdown","title":"Python"},{"location":"deploy/computer/#database","text":"We need the MySQL database system. We are very particular about the details of installing and configuring MySQL here. No previous MySQL on your Mac Preferably you do not have already MySQL installed. If you already have MySQL on your computer, backup your databases and remove it. After the install procedure for MySQL, you can import these backups into the new MySQL system. There are several ways to get MySQL, but only one of them works with Emdros , as I found out the hard way! You need to download the community edition . Take care to pick the download that matches the architecture of your mac ( arm64 for the newer macs, x86_64 for the usual Intel macs). and install it in the macos way (clicking on the package in your downloads folder and following instructions). Do not customise anything! And leave the root password empty. The installation process is described here , and it shows where you can control your databases.","title":"Database"},{"location":"deploy/computer/#shebanq-repository","text":"The installation script is in the Shebanq repository, so you have to clone the repo first. We assume you do that under a directory github in your home folder. If you do not want that, you can do it somewhere else, but then you have to tweak a setting in a configuration script later. mkdir -p ~/github/etcbc cd ~/github/etcbc git clone https://github.com/etcbc/shebanq cd shebanq/scripts/computer Now we can do work.","title":"Shebanq repository"},{"location":"deploy/computer/#finish-mysql-configuration","text":"In a terminal, do this (still in the same directory as above): ./mysql.sh Then restart the terminal. Then restart the MySQL (via its preference pane in System Preferences). Now your database is fully functional for the purposes of SHEBANQ.","title":"Finish MySQL configuration"},{"location":"deploy/computer/#components","text":"Before you run the installation script, here is some information about what gets installed.","title":"Components"},{"location":"deploy/computer/#emdros","text":"Emdros is the software that makes the MQL queries possible which are so typical for SHEBANQ. It sits in the middle of your MQL queries and the MySQL database. The software is already packaged in the SHEBANQ repo. The install script will take it out, unpack it, and compile it, a lengthy process.","title":"Emdros"},{"location":"deploy/computer/#dynamic-data","text":"Dynamic data is the data that is accumulated in the database of the website as a consequence of the actions of the users. Think of the user accounts and the saved queries and notes. For the local install of SHEBANQ we start fill the relevant databases with empty data.","title":"Dynamic data"},{"location":"deploy/computer/#static-data","text":"Static data is the fixed data offered by the ETCBC: the text and linguistic features of the Hebrew Bible in several versions. That data is in the BHSA repository that we clone, and will be imported from there, a lengthy process.","title":"Static data"},{"location":"deploy/computer/#web2py","text":"Our web framework is web2py , a Python based system to build web applications. We install it from GitHub, and after that we plug SHEBANQ into it. Web2Py comes with its own local webserver, so we do not have to set up complicated webservers such as Apache. Instead, we can rely on the built-in webserver that comes with Web2py .","title":"Web2py"},{"location":"deploy/computer/#run-install-script","text":"In a terminal, do this): cd ~/github/etcbc/shebanq/scripts/computer ./installmacos.sh At the end, the SHEBANQ web server will be started and a first visit to the local SHEBANQ website will be made.","title":"Run install script"},{"location":"deploy/computer/#starting-and-stopping-shebanq","text":"You stop SHEBANQ by pressing Ctrl + C in the terminal from where you started SHEBANQ. You start SHEBANQ by double-clicking on the file shebanq.command in your home folder, under Applications/SHEBANQ . not the system-wide applications folder Go to your home folder and find an applications folder in it. That is the one that contains SHEBANQ and there you find shebanq.command . shortcut You can drag this file into the side bar of the Finder. That way you have an easy shortcut to the shebanq webapp.","title":"Starting and stopping SHEBANQ"},{"location":"deploy/computer/#debugging","text":"When you browse shebanq, you might see messages in the terminal window, and when you change the Python code in SHEBANQ and add statements that print messages, they will show up here.","title":"Debugging"},{"location":"deploy/computer/#updating","text":"You can update SHEBANQ by doing this in a terminal cd ~/Applications/SHEBANQ ./update.sh","title":"Updating"},{"location":"deploy/computer/#selective-installation","text":"You can install individual pieces. View the options of the install script. cd ~/github/etcbc/shebanq/scripts/computer ./installmacos --help","title":"Selective installation"},{"location":"deploy/maintenance/","text":"Installation and maintenance \u00b6 Motivation \u00b6 The promise of SHEBANQ to its users is that the queries and notes they have saved on SHEBANQ will be accessible by a fixed URL for the indefinite future. Therefore it is vitally important to backup this data and store those backups in a variety of places, not only on the server that hosts SHEBANQ, however well that server is being managed. The following tasks must be addressed: Server migration Servers do not have eternal life, so every now and then SHEBANQ has to migrate from one server to another. 'Foreign' servers We encourage people to host their own SHEBANQ, so we must support new installations on third party servers. Those servers must be equally maintainable as the offical servers. Software updates In order to keep SHEBANQ alive over the years, software updates must be carried out, not only of the webapp, but also of its supporting systems, Emdros , Web2Py , Python , and MariaDB (a replacement of MySQL ). Data updates The ETCBC , as the provider of the textual and linguistic data of the Hebrew Bible, produces data updates through its BHSA repository. These data updates must be applied to the servers that host SHEBANQ. There are some additional requirements which are vital for the long-term support of SHEBANQ. Security SHEBANQ servers should be secure. They must be hardened against attacks, and the user data must be kept safe, even if only the bare minimum of personal data is stored (names, email addresses, password hashes). Automation Maintaining a server requires countless nitty-gritty steps, which are easily forgotten. That is the prime reason to automate all these steps. People that are new to SHEBANQ should be able to maintain SHEBANQ in a straightforward way. Documentation The maintenance of SHEBANQ should be well documented. Together with automation it is the best help we can offer to the maintainers of SHEBANQ in the years to come. Tools \u00b6 This repository contains a set of shell scripts to perform installation and maintenance tasks on SHEBANQ servers. It also has most of the assets needed for installation. The remaining assets are available through the BHSA repository. not meant for local installations Although SHEBANQ can be installed on a personal computer, it is not documented here. It is considerably easier than installing it on a server. See some hints under Trouble-shooting below. SELINUX only So far, the scripts only support servers that run under SELINUX . Ubuntu is not currently supported. Again, installing SHEBANQ on Ubuntu is easier than on SELINUX. Requirements Read first to the end of this document, and take note of the requirements . SELINUX might not be the most obvious choice to host SHEBANQ on, because it is considerably more difficult to work with than Ubuntu. However, there are a few key advantages you enjoy after the installation: prime security You have SHEBANQ running on a top-notch secure system. head-ache-free software updates Much of supporting software (Python, MySQL, Apache) can be updated without the risk of breaking things, because the current versions of them are supported for an extra long time. Often, new security updates are back-ported to older versions, so that you can avoid upgrading to newer but incompatible versions. The latter advantage is quite convenient for SHEBANQ, because the Emdros software is compiled against de MySQL libraries. So when MySQL is upgraded to a new version, Emdros has to be recompiled. And that is something we do not want to do too often. Requirements \u00b6 Server \u00b6 The server on which SHEBANQ is installed is a Security Enhanced Linux Server (SELINUX) . You must be able to access this server by means of ssh and scp , using a certificate , so that you are not prompted for passwords. You must have sudo rights on this server. We assume that the Apache webserver is already installed and: its config files reside in /etc/httpd ; the relevant certificates are installed in /etc/pki/tls/certs and /etc/pki/tls/private mod_wsgi is not yet installed. We assume that the following packages can be installed with yum . That means that you must have the right package repositories enabled. python36 python36-devel python3-markdown mod_wsgi mariadb mariadb-devel mariadb-server Local computer \u00b6 You have cloned the shebanq and bhsa repositories from Github to your local computer: cd ~/github/etcbc git clone https://github.com/etcbc/shebanq git clone https://github.com/etcbc/bhsa If you have cloned these long ago, you can make them up to date by pulling them again: cd ~/github/etcbc/shebanq git pull origin master cd ~/github/etcbc/bhsa git pull origin master You can choose to place the github directory somewhere else, see below, but the structure within the github directory must be as prescribed. The _local directory \u00b6 The scripts in ~/github/etcbc/scripts/maintenance have generic content. Before working with it, the file configtemplate must be edited to reflect your actual situation. Do this as follows: cd ~/github/etcbc/shebanq/scripts/maintenance ./localize.sh Now you have a directory ~/github/etcbc/shebanq/_local And the command tells you what to do next: copy configtemplate.sh to config.sh edit config.sh What needs to be done is: adapt the serverOther variables to your situation: provide the name of the database host server (typically: localhost) provide passwords for mysql users named shebanq and shebanq_admin ; these users will be created and later in the installation process shebanq_admin is used for importing data, and after installation the webapp will use shebanq to fetch data in response to requests by web users. provide the locations where the https-certificates are installed in Apache; these will be used in in the httpd config file for the webapp. The _local directory is never pushed online (because of the .gitignore file in the shebanq repo), so your local setup remains private. Also, when you tweak files in your _local directory, you can still pull new versions of the shebanq repository without overwriting your local changes. When you run a maintenance script, you should run them from this _local directory, to be sure that you run your adapted version. These local files are also the ones that are sent to the server in the provisioning step below. The scripts can be run from any directory, because they do not depend on the current working directory. The scripts \u00b6 The originals of the maintenance scripts are in the shebanq repository in the scripts/maintenance directory. In the previous step you have copied them to the _local directory. You can run all scripts with --help to view the options and arguments it accepts. backup.sh Run it on the server. Backs up the databases that have dynamic web data: shebanq_web shebanq_note save.sh Run it on your local computer. It will retrieve data from the server. Saves backups of dynamic web data from the shebanq server to a directory on your local computer where you hold backups. The backup is saved in a subfolder yyyy-mm-ddT-hh-mm-ss (the datetime of the backup). provision.sh Run it on your local computer. It will send data to the server. Copies all files needed for installation from your local computer to the shebanq server. These files end up in shebanq-install under your home directory there. The maintenance scripts themselves will be copied over from your _local directory to your home directory on the server. The latest backup of dynamic data from will be taken from your local computer and copied over to the server. You can run this script in single steps by passing an option. install.sh Run it on the server. Installs required software (MySQL, Python, ModWsgi, Emdros, Web2py, and Shebanq itself) and loads data into the databases. You can run this script in single steps by passing an option. uninstall.sh Run it on the server. Uninstalls what install.sh has installed. You can run this script in single steps by passing an option. restore.sh Run it on the server. Restores the databases that have dynamic web data: shebanq_web shebanq_note They are restored from a previous backup. update.sh Run it on the server. Updates the shebanq webapp, i.e. the web-app as it is hung into the web2py framework. The situations \u00b6 There are several situations, depending on the server that hosts SHEBANQ: Production p url: shebanq.ancient-data.org hosted by DANS on a KNAW server publicly accessible, the one and only offical shebanq website Production (new) pn url: not yet shebanq.ancient-data.org hosted by DANS on a KNAW server, as a successor of the current production server not yet publicly accessible, not yet the one and only offical shebanq website Test t url: test.shebanq.ancient-data.org hosted by DANS on a KNAW server only accessible from within the DANS-KNAW network the one and only offical shebanq test website Other o url: to be configured by you hosted on your server access managed by you an unoffical shebanq website (very welcome, thanks for taking the trouble) Other (new) on url: to be configured by you hosted on your new server, as a successor to your current server access managed by you an unoffical shebanq website The scenarios \u00b6 The maintenance scripts can be used in several identified scenarios, which we spell out below. In all situations, when on the server, you must sudo the invocations of the scripts or run them as root. It might be the case, especially on production servers, that you do not have general sudo rights and that the script as a whole can not be run with root privileges. In that case you need to have rights for specific commands to run them under sudo. That is why in some scripts the word sudo still appears. If it does not work for your situation, you can tweak your local copy of the script. Install SHEBANQ on a new server \u00b6 Situation Other (first time) \u00b6 This is likely your case: you want to install SHEBANQ on a server of your choice. For the sake of simplicity we assume that the database resides on the server itself and we will transport and import all data needed. We assume that this there is no previous dynamic data to be imported. (local computer) ./provision.sh o upload all needed installation files to the server; there will also be (big) data transfers of the static databases. (server) ./install.sh perform the complete installation of shebanq Arrange with your internet provider to let the domain name point to the IP address of the server Other (migrating) \u00b6 You have a server with SHEBANQ running and want to migrate to a new server. (current server) ./backup.sh make a backup of user data (local computer) ./save.sh o save backup to local computer (local computer) ./provision.sh on upload all needed installation files to the server; the backup of the current server will be imported; there will also be (big) data transfers of the static databases. (new server) ./install.sh perform the complete installation of shebanq Arrange with your internet provider to let the domain name point to the IP address of the new server (local computer) Tweak config.sh and put the name of the new server into serverOther . Test \u00b6 The database resides on the test server itself, data operations will be performed. (production server) ./backup.sh make a backup of user data (only to get meaningful content in the databases) (local computer) ./save.sh p save backup to local computer (only to get meaningful content in the databases) (local computer) ./provision.sh t upload all needed installation files to the server; there will also be (big) data transfers of the static databases. (test server) ./install.sh perform the complete installation of shebanq Production (migrating) \u00b6 The database resides on a separate database server, no data operations needed. (current production server) ./backup.sh make a backup of user data (only for safety, if all goes well, we do not need it) (local computer) ./save.sh p save backup from current production server to local computer (only for safety, if all goes well, we do not need it) (local computer) ./provision.sh pn upload all needed installation files to the new production server; the static database files will be skipped. (new production server) ./install.sh perform the complete installation of shebanq Arrange with your internet provider to let the domain name point to the IP address of the new production server (local computer) Tweak config.sh and put the name of the new production server into serverProd . Update SHEBANQ on an existing server \u00b6 This works the same in all situations. We give the steps for the other situation, which is most likely your situation. In all situations, when on the server, you must sudo the invocations of the scripts or run them as root. SHEBANQ code only \u00b6 Do this when you noticed that the SHEBANQ repo has updates. (server) update.sh Pull the SHEBANQ repository from GitHUb That's all. Simple and quick. A version of the static data \u00b6 Do this when a new version of the etcbc data is released or an existing version has got an update. These databases are released through the etcbc/bhsa repository on GitHub, in the directory shebanq . You have them in your local clone of the BHSA. Below, version is the desired data version that you want to import, such as 4 , 4b , c , 2017 , 2021 . (local computer) git pull origin master Do this in your clone of the BHSA repository. And then again in your clone of the SHEBANQ repository (local computer) ./provision.sh o --static version upload all needed data files files to the server; (server) install.sh --static version This imports both the shebanq_passage and shebanq_etcbc databases of that version. Emdros \u00b6 Do this when you noticed that there is a new version of Emdros. In that case, the SHEBANQ repository contains all that is necessary. (local computer) git pull origin master Do this in your clone of the SHEBANQ repository. (local computer) Tweak config.sh Adapt the EMDROS_VERSION variable so that it reflects the Emdros version in question. (local computer) ./provision.sh o --emdros Only transfer the new Emdros distribution. (server) ./install.sh --emdros Install Emdros only. (server) update.sh Pull the SHEBANQ repository from GitHUb Web2py \u00b6 Do this when you noticed that there is a new version of Web2py and if you are sure that it does not break SHEBANQ. In that case, the SHEBANQ repository contains all that is necessary. (local computer) git pull origin master Do this in your clone of the SHEBANQ repository. (local computer) ./provision.sh o --web2py Only transfer the new Web2py distribution. (server) ./install.sh --web2py Install Web2py only. (server) update.sh Pull the SHEBANQ repository from GitHUb Maintain backups of dynamic data \u00b6 The dynamic data of SHEBANQ is stored in two databases: shebanq_web : user data: names and email addresses and password hashes of registered users. query data: meta data and results of queries that have been saved in shebanq shebanq_note : note data: metadata and content of all notes that have been saved in SHEBANQ. Currently, I make occasional backups of the production SHEBANQ and store them on my local computer, which is backed up in multiple ways, offline and online. Backup dynamic data \u00b6 (server) ./backup.sh This will create a fresh backup of the dynamic data and store it on the server in a folder with a time-stamped name. Also, a symbolic link under the name latest will link to that backup. (local computer) ./save.sh o This will fetch the latest backup from the server to your local computer. It will end up in your backup directory there, under the same time-stamped name, and also with a latest link. Restore dynamic data \u00b6 In cases where a server has crashed and data has been lost, it is necessary to restore the latest known dynamic data. (local computer) ./provision.sh o --dynamic This will find the latest dynamic data backup of the server that exists on your local computer and upload it to the server. (server) ./restore.sh This will find the latest dynamic data backup that exists on the server and import it to the databases. Mixing backups If you maintain multiple servers from your local computers, the backups of all these servers end up in the same place. Production and test backups are kept separate In order to avoid the risk of restoring a backup made on the test server to the production server, backups made on a test server are stored in a different directory. When backups are restored, they will never be taken from this directory, not even when restoring on the test server. If you do need to restore a test backup on the test server, you have to manually copy it over to the right place. The same holds for backups that come from the serverOtherNew and serverProdNew servers. These backups have no importance except for testing the processes, so they will be stored in the alternative place. Trouble shooting \u00b6 It is very difficult to view messages issued by Python code. So far, I have not been able to view them anywhere in the log files. The recommended practice is to install Web2Py and SHEBANQ on your local computer, without Apache, but using Web2pu's built-in webserver. You do need to have the proper mysql installed, from the downloaded community edition . Then you have to compile Emdros against this MySQL. You have to clone web2py itself: mkdir ~/github/web2py cd ~/github/web2py git clone --recursive https://github.com/web2py/web2py You hook shebanq in by cd ~/github/web2py/web2py/applications ln -s ~/github/etcbc/shebanq shebanq After that you can start web2py by means of cd ~/github/web2py/web2py python3 web2py.py --no_gui -s localhost -p 8000 -a demo -c server.crt -k server.key Now you have a local webserver on your ocmputer that serves shebanq on localhost When you browse shebanq, you might see messages in the terminal, and when you change the Python code in SHEBANQ, you can see the effects. You can write debug messages to the terminal. Use this local SHEBANQ for debugging.","title":"Maintenance"},{"location":"deploy/maintenance/#installation-and-maintenance","text":"","title":"Installation and maintenance"},{"location":"deploy/maintenance/#motivation","text":"The promise of SHEBANQ to its users is that the queries and notes they have saved on SHEBANQ will be accessible by a fixed URL for the indefinite future. Therefore it is vitally important to backup this data and store those backups in a variety of places, not only on the server that hosts SHEBANQ, however well that server is being managed. The following tasks must be addressed: Server migration Servers do not have eternal life, so every now and then SHEBANQ has to migrate from one server to another. 'Foreign' servers We encourage people to host their own SHEBANQ, so we must support new installations on third party servers. Those servers must be equally maintainable as the offical servers. Software updates In order to keep SHEBANQ alive over the years, software updates must be carried out, not only of the webapp, but also of its supporting systems, Emdros , Web2Py , Python , and MariaDB (a replacement of MySQL ). Data updates The ETCBC , as the provider of the textual and linguistic data of the Hebrew Bible, produces data updates through its BHSA repository. These data updates must be applied to the servers that host SHEBANQ. There are some additional requirements which are vital for the long-term support of SHEBANQ. Security SHEBANQ servers should be secure. They must be hardened against attacks, and the user data must be kept safe, even if only the bare minimum of personal data is stored (names, email addresses, password hashes). Automation Maintaining a server requires countless nitty-gritty steps, which are easily forgotten. That is the prime reason to automate all these steps. People that are new to SHEBANQ should be able to maintain SHEBANQ in a straightforward way. Documentation The maintenance of SHEBANQ should be well documented. Together with automation it is the best help we can offer to the maintainers of SHEBANQ in the years to come.","title":"Motivation"},{"location":"deploy/maintenance/#tools","text":"This repository contains a set of shell scripts to perform installation and maintenance tasks on SHEBANQ servers. It also has most of the assets needed for installation. The remaining assets are available through the BHSA repository. not meant for local installations Although SHEBANQ can be installed on a personal computer, it is not documented here. It is considerably easier than installing it on a server. See some hints under Trouble-shooting below. SELINUX only So far, the scripts only support servers that run under SELINUX . Ubuntu is not currently supported. Again, installing SHEBANQ on Ubuntu is easier than on SELINUX. Requirements Read first to the end of this document, and take note of the requirements . SELINUX might not be the most obvious choice to host SHEBANQ on, because it is considerably more difficult to work with than Ubuntu. However, there are a few key advantages you enjoy after the installation: prime security You have SHEBANQ running on a top-notch secure system. head-ache-free software updates Much of supporting software (Python, MySQL, Apache) can be updated without the risk of breaking things, because the current versions of them are supported for an extra long time. Often, new security updates are back-ported to older versions, so that you can avoid upgrading to newer but incompatible versions. The latter advantage is quite convenient for SHEBANQ, because the Emdros software is compiled against de MySQL libraries. So when MySQL is upgraded to a new version, Emdros has to be recompiled. And that is something we do not want to do too often.","title":"Tools"},{"location":"deploy/maintenance/#requirements","text":"","title":"Requirements"},{"location":"deploy/maintenance/#server","text":"The server on which SHEBANQ is installed is a Security Enhanced Linux Server (SELINUX) . You must be able to access this server by means of ssh and scp , using a certificate , so that you are not prompted for passwords. You must have sudo rights on this server. We assume that the Apache webserver is already installed and: its config files reside in /etc/httpd ; the relevant certificates are installed in /etc/pki/tls/certs and /etc/pki/tls/private mod_wsgi is not yet installed. We assume that the following packages can be installed with yum . That means that you must have the right package repositories enabled. python36 python36-devel python3-markdown mod_wsgi mariadb mariadb-devel mariadb-server","title":"Server"},{"location":"deploy/maintenance/#local-computer","text":"You have cloned the shebanq and bhsa repositories from Github to your local computer: cd ~/github/etcbc git clone https://github.com/etcbc/shebanq git clone https://github.com/etcbc/bhsa If you have cloned these long ago, you can make them up to date by pulling them again: cd ~/github/etcbc/shebanq git pull origin master cd ~/github/etcbc/bhsa git pull origin master You can choose to place the github directory somewhere else, see below, but the structure within the github directory must be as prescribed.","title":"Local computer"},{"location":"deploy/maintenance/#the-_local-directory","text":"The scripts in ~/github/etcbc/scripts/maintenance have generic content. Before working with it, the file configtemplate must be edited to reflect your actual situation. Do this as follows: cd ~/github/etcbc/shebanq/scripts/maintenance ./localize.sh Now you have a directory ~/github/etcbc/shebanq/_local And the command tells you what to do next: copy configtemplate.sh to config.sh edit config.sh What needs to be done is: adapt the serverOther variables to your situation: provide the name of the database host server (typically: localhost) provide passwords for mysql users named shebanq and shebanq_admin ; these users will be created and later in the installation process shebanq_admin is used for importing data, and after installation the webapp will use shebanq to fetch data in response to requests by web users. provide the locations where the https-certificates are installed in Apache; these will be used in in the httpd config file for the webapp. The _local directory is never pushed online (because of the .gitignore file in the shebanq repo), so your local setup remains private. Also, when you tweak files in your _local directory, you can still pull new versions of the shebanq repository without overwriting your local changes. When you run a maintenance script, you should run them from this _local directory, to be sure that you run your adapted version. These local files are also the ones that are sent to the server in the provisioning step below. The scripts can be run from any directory, because they do not depend on the current working directory.","title":"The _local directory"},{"location":"deploy/maintenance/#the-scripts","text":"The originals of the maintenance scripts are in the shebanq repository in the scripts/maintenance directory. In the previous step you have copied them to the _local directory. You can run all scripts with --help to view the options and arguments it accepts. backup.sh Run it on the server. Backs up the databases that have dynamic web data: shebanq_web shebanq_note save.sh Run it on your local computer. It will retrieve data from the server. Saves backups of dynamic web data from the shebanq server to a directory on your local computer where you hold backups. The backup is saved in a subfolder yyyy-mm-ddT-hh-mm-ss (the datetime of the backup). provision.sh Run it on your local computer. It will send data to the server. Copies all files needed for installation from your local computer to the shebanq server. These files end up in shebanq-install under your home directory there. The maintenance scripts themselves will be copied over from your _local directory to your home directory on the server. The latest backup of dynamic data from will be taken from your local computer and copied over to the server. You can run this script in single steps by passing an option. install.sh Run it on the server. Installs required software (MySQL, Python, ModWsgi, Emdros, Web2py, and Shebanq itself) and loads data into the databases. You can run this script in single steps by passing an option. uninstall.sh Run it on the server. Uninstalls what install.sh has installed. You can run this script in single steps by passing an option. restore.sh Run it on the server. Restores the databases that have dynamic web data: shebanq_web shebanq_note They are restored from a previous backup. update.sh Run it on the server. Updates the shebanq webapp, i.e. the web-app as it is hung into the web2py framework.","title":"The scripts"},{"location":"deploy/maintenance/#the-situations","text":"There are several situations, depending on the server that hosts SHEBANQ: Production p url: shebanq.ancient-data.org hosted by DANS on a KNAW server publicly accessible, the one and only offical shebanq website Production (new) pn url: not yet shebanq.ancient-data.org hosted by DANS on a KNAW server, as a successor of the current production server not yet publicly accessible, not yet the one and only offical shebanq website Test t url: test.shebanq.ancient-data.org hosted by DANS on a KNAW server only accessible from within the DANS-KNAW network the one and only offical shebanq test website Other o url: to be configured by you hosted on your server access managed by you an unoffical shebanq website (very welcome, thanks for taking the trouble) Other (new) on url: to be configured by you hosted on your new server, as a successor to your current server access managed by you an unoffical shebanq website","title":"The situations"},{"location":"deploy/maintenance/#the-scenarios","text":"The maintenance scripts can be used in several identified scenarios, which we spell out below. In all situations, when on the server, you must sudo the invocations of the scripts or run them as root. It might be the case, especially on production servers, that you do not have general sudo rights and that the script as a whole can not be run with root privileges. In that case you need to have rights for specific commands to run them under sudo. That is why in some scripts the word sudo still appears. If it does not work for your situation, you can tweak your local copy of the script.","title":"The scenarios"},{"location":"deploy/maintenance/#install-shebanq-on-a-new-server","text":"","title":"Install SHEBANQ on a new server"},{"location":"deploy/maintenance/#situation-other-first-time","text":"This is likely your case: you want to install SHEBANQ on a server of your choice. For the sake of simplicity we assume that the database resides on the server itself and we will transport and import all data needed. We assume that this there is no previous dynamic data to be imported. (local computer) ./provision.sh o upload all needed installation files to the server; there will also be (big) data transfers of the static databases. (server) ./install.sh perform the complete installation of shebanq Arrange with your internet provider to let the domain name point to the IP address of the server","title":"Situation Other (first time)"},{"location":"deploy/maintenance/#other-migrating","text":"You have a server with SHEBANQ running and want to migrate to a new server. (current server) ./backup.sh make a backup of user data (local computer) ./save.sh o save backup to local computer (local computer) ./provision.sh on upload all needed installation files to the server; the backup of the current server will be imported; there will also be (big) data transfers of the static databases. (new server) ./install.sh perform the complete installation of shebanq Arrange with your internet provider to let the domain name point to the IP address of the new server (local computer) Tweak config.sh and put the name of the new server into serverOther .","title":"Other (migrating)"},{"location":"deploy/maintenance/#test","text":"The database resides on the test server itself, data operations will be performed. (production server) ./backup.sh make a backup of user data (only to get meaningful content in the databases) (local computer) ./save.sh p save backup to local computer (only to get meaningful content in the databases) (local computer) ./provision.sh t upload all needed installation files to the server; there will also be (big) data transfers of the static databases. (test server) ./install.sh perform the complete installation of shebanq","title":"Test"},{"location":"deploy/maintenance/#production-migrating","text":"The database resides on a separate database server, no data operations needed. (current production server) ./backup.sh make a backup of user data (only for safety, if all goes well, we do not need it) (local computer) ./save.sh p save backup from current production server to local computer (only for safety, if all goes well, we do not need it) (local computer) ./provision.sh pn upload all needed installation files to the new production server; the static database files will be skipped. (new production server) ./install.sh perform the complete installation of shebanq Arrange with your internet provider to let the domain name point to the IP address of the new production server (local computer) Tweak config.sh and put the name of the new production server into serverProd .","title":"Production (migrating)"},{"location":"deploy/maintenance/#update-shebanq-on-an-existing-server","text":"This works the same in all situations. We give the steps for the other situation, which is most likely your situation. In all situations, when on the server, you must sudo the invocations of the scripts or run them as root.","title":"Update SHEBANQ on an existing server"},{"location":"deploy/maintenance/#shebanq-code-only","text":"Do this when you noticed that the SHEBANQ repo has updates. (server) update.sh Pull the SHEBANQ repository from GitHUb That's all. Simple and quick.","title":"SHEBANQ code only"},{"location":"deploy/maintenance/#a-version-of-the-static-data","text":"Do this when a new version of the etcbc data is released or an existing version has got an update. These databases are released through the etcbc/bhsa repository on GitHub, in the directory shebanq . You have them in your local clone of the BHSA. Below, version is the desired data version that you want to import, such as 4 , 4b , c , 2017 , 2021 . (local computer) git pull origin master Do this in your clone of the BHSA repository. And then again in your clone of the SHEBANQ repository (local computer) ./provision.sh o --static version upload all needed data files files to the server; (server) install.sh --static version This imports both the shebanq_passage and shebanq_etcbc databases of that version.","title":"A version of the static data"},{"location":"deploy/maintenance/#emdros","text":"Do this when you noticed that there is a new version of Emdros. In that case, the SHEBANQ repository contains all that is necessary. (local computer) git pull origin master Do this in your clone of the SHEBANQ repository. (local computer) Tweak config.sh Adapt the EMDROS_VERSION variable so that it reflects the Emdros version in question. (local computer) ./provision.sh o --emdros Only transfer the new Emdros distribution. (server) ./install.sh --emdros Install Emdros only. (server) update.sh Pull the SHEBANQ repository from GitHUb","title":"Emdros"},{"location":"deploy/maintenance/#web2py","text":"Do this when you noticed that there is a new version of Web2py and if you are sure that it does not break SHEBANQ. In that case, the SHEBANQ repository contains all that is necessary. (local computer) git pull origin master Do this in your clone of the SHEBANQ repository. (local computer) ./provision.sh o --web2py Only transfer the new Web2py distribution. (server) ./install.sh --web2py Install Web2py only. (server) update.sh Pull the SHEBANQ repository from GitHUb","title":"Web2py"},{"location":"deploy/maintenance/#maintain-backups-of-dynamic-data","text":"The dynamic data of SHEBANQ is stored in two databases: shebanq_web : user data: names and email addresses and password hashes of registered users. query data: meta data and results of queries that have been saved in shebanq shebanq_note : note data: metadata and content of all notes that have been saved in SHEBANQ. Currently, I make occasional backups of the production SHEBANQ and store them on my local computer, which is backed up in multiple ways, offline and online.","title":"Maintain backups of dynamic data"},{"location":"deploy/maintenance/#backup-dynamic-data","text":"(server) ./backup.sh This will create a fresh backup of the dynamic data and store it on the server in a folder with a time-stamped name. Also, a symbolic link under the name latest will link to that backup. (local computer) ./save.sh o This will fetch the latest backup from the server to your local computer. It will end up in your backup directory there, under the same time-stamped name, and also with a latest link.","title":"Backup dynamic data"},{"location":"deploy/maintenance/#restore-dynamic-data","text":"In cases where a server has crashed and data has been lost, it is necessary to restore the latest known dynamic data. (local computer) ./provision.sh o --dynamic This will find the latest dynamic data backup of the server that exists on your local computer and upload it to the server. (server) ./restore.sh This will find the latest dynamic data backup that exists on the server and import it to the databases. Mixing backups If you maintain multiple servers from your local computers, the backups of all these servers end up in the same place. Production and test backups are kept separate In order to avoid the risk of restoring a backup made on the test server to the production server, backups made on a test server are stored in a different directory. When backups are restored, they will never be taken from this directory, not even when restoring on the test server. If you do need to restore a test backup on the test server, you have to manually copy it over to the right place. The same holds for backups that come from the serverOtherNew and serverProdNew servers. These backups have no importance except for testing the processes, so they will be stored in the alternative place.","title":"Restore dynamic data"},{"location":"deploy/maintenance/#trouble-shooting","text":"It is very difficult to view messages issued by Python code. So far, I have not been able to view them anywhere in the log files. The recommended practice is to install Web2Py and SHEBANQ on your local computer, without Apache, but using Web2pu's built-in webserver. You do need to have the proper mysql installed, from the downloaded community edition . Then you have to compile Emdros against this MySQL. You have to clone web2py itself: mkdir ~/github/web2py cd ~/github/web2py git clone --recursive https://github.com/web2py/web2py You hook shebanq in by cd ~/github/web2py/web2py/applications ln -s ~/github/etcbc/shebanq shebanq After that you can start web2py by means of cd ~/github/web2py/web2py python3 web2py.py --no_gui -s localhost -p 8000 -a demo -c server.crt -k server.key Now you have a local webserver on your ocmputer that serves shebanq on localhost When you browse shebanq, you might see messages in the terminal, and when you change the Python code in SHEBANQ, you can see the effects. You can write debug messages to the terminal. Use this local SHEBANQ for debugging.","title":"Trouble shooting"},{"location":"deploy/server/","text":"Server \u00b6 This article describes the installation and maintenance of SHEBANQ of a secure RedHat Fedora linux server. Ubuntu If you prefer Ubuntu, that should be easier. You need to change a few things: yum becomes apt-get , the names of installation packages might be slightly different. You can leave out typical selinux commands such as chcon and setsebool . Various locations maybe a little bit different. Tools \u00b6 This repository contains a set of shell scripts to perform installation and maintenance tasks on SHEBANQ servers. It also has most of the assets needed for installation. The remaining assets are available through the BHSA repository. Requirements Read first to the end of this document, and take note of the requirements . SELINUX might not be the most obvious choice to host SHEBANQ on, because it is considerably more difficult to work with than Ubuntu. However, there are a few key advantages you enjoy after the installation: prime security You have SHEBANQ running on a top-notch secure system. head-ache-free software updates Much of supporting software (Python, MySQL, Apache) can be updated without the risk of breaking things, because the current versions of them are supported for an extra long time. Often, new security updates are back-ported to older versions, so that you can avoid upgrading to newer but incompatible versions. The latter advantage is quite convenient for SHEBANQ, because the Emdros software is compiled against de MySQL libraries. So when MySQL is upgraded to a new version, Emdros has to be recompiled. And that is something we do not want to do too often. Requirements \u00b6 Server \u00b6 The server on which SHEBANQ is installed is a Security Enhanced Linux Server (SELINUX) . You must be able to access this server by means of ssh and scp , using a certificate , so that you are not prompted for passwords. You must have sudo rights on this server. We assume that the Apache webserver is already installed and: its config files reside in /etc/httpd ; the relevant certificates are installed in /etc/pki/tls/certs and /etc/pki/tls/private mod_wsgi is not yet installed. We assume that the following packages can be installed with yum . That means that you must have the right package repositories enabled. python36 python36-devel python3-markdown mod_wsgi mariadb mariadb-devel mariadb-server Local computer \u00b6 You have cloned the shebanq and bhsa repositories from Github to your local computer: cd ~/github/etcbc git clone https://github.com/etcbc/shebanq git clone https://github.com/etcbc/bhsa If you have cloned these long ago, you can make them up to date by pulling them again: cd ~/github/etcbc/shebanq git pull origin master cd ~/github/etcbc/bhsa git pull origin master You can choose to place the github directory somewhere else, see below, but the structure within the github directory must be as prescribed. The _local directory \u00b6 The scripts in ~/github/etcbc/scripts/maintenance have generic content. Before working with it, the file configtemplate must be edited to reflect your actual situation. Do this as follows: cd ~/github/etcbc/shebanq/scripts/maintenance ./localize.sh Now you have a directory ~/github/etcbc/shebanq/_local And the command tells you what to do next: copy configtemplate.sh to config.sh edit config.sh What needs to be done is: adapt the serverOther variables to your situation: provide the name of the database host server (typically: localhost) provide passwords for mysql users named shebanq and shebanq_admin ; these users will be created and later in the installation process shebanq_admin is used for importing data, and after installation the webapp will use shebanq to fetch data in response to requests by web users. provide the locations where the https-certificates are installed in Apache; these will be used in in the httpd config file for the webapp. The _local directory is never pushed online (because of the .gitignore file in the shebanq repo), so your local setup remains private. Also, when you tweak files in your _local directory, you can still pull new versions of the shebanq repository without overwriting your local changes. When you run a maintenance script, you should run them from this _local directory, to be sure that you run your adapted version. These local files are also the ones that are sent to the server in the provisioning step below. The scripts can be run from any directory, because they do not depend on the current working directory. The scripts \u00b6 The originals of the maintenance scripts are in the shebanq repository in the scripts/maintenance directory. In the previous step you have copied them to the _local directory. You can run all scripts with --help to view the options and arguments it accepts. backup.sh Run it on the server. Backs up the databases that have dynamic web data: shebanq_web shebanq_note save.sh Run it on your local computer. It will retrieve data from the server. Saves backups of dynamic web data from the shebanq server to a directory on your local computer where you hold backups. The backup is saved in a subfolder yyyy-mm-ddT-hh-mm-ss (the datetime of the backup). provision.sh Run it on your local computer. It will send data to the server. Copies all files needed for installation from your local computer to the shebanq server. These files end up in shebanq-install under your home directory there. The maintenance scripts themselves will be copied over from your _local directory to your home directory on the server. The latest backup of dynamic data from will be taken from your local computer and copied over to the server. You can run this script in single steps by passing an option. install.sh Run it on the server. Installs required software (MySQL, Python, ModWsgi, Emdros, Web2py, and Shebanq itself) and loads data into the databases. You can run this script in single steps by passing an option. uninstall.sh Run it on the server. Uninstalls what install.sh has installed. You can run this script in single steps by passing an option. restore.sh Run it on the server. Restores the databases that have dynamic web data: shebanq_web shebanq_note They are restored from a previous backup. update.sh Run it on the server. Updates the shebanq webapp, i.e. the web-app as it is hung into the web2py framework. The situations \u00b6 There are several situations, depending on the server that hosts SHEBANQ: Production p url: shebanq.ancient-data.org hosted by DANS on a KNAW server publicly accessible, the one and only offical shebanq website Production (new) pn url: not yet shebanq.ancient-data.org hosted by DANS on a KNAW server, as a successor of the current production server not yet publicly accessible, not yet the one and only offical shebanq website Test t url: test.shebanq.ancient-data.org hosted by DANS on a KNAW server only accessible from within the DANS-KNAW network the one and only offical shebanq test website Other o url: to be configured by you hosted on your server access managed by you an unoffical shebanq website (very welcome, thanks for taking the trouble) Other (new) on url: to be configured by you hosted on your new server, as a successor to your current server access managed by you an unoffical shebanq website The scenarios \u00b6 The maintenance scripts can be used in several identified scenarios, which we spell out below. In all situations, when on the server, you must sudo the invocations of the scripts or run them as root. It might be the case, especially on production servers, that you do not have general sudo rights and that the script as a whole can not be run with root privileges. In that case you need to have rights for specific commands to run them under sudo. That is why in some scripts the word sudo still appears. If it does not work for your situation, you can tweak your local copy of the script. Install SHEBANQ on a new server \u00b6 Situation Other (first time) \u00b6 This is likely your case: you want to install SHEBANQ on a server of your choice. For the sake of simplicity we assume that the database resides on the server itself and we will transport and import all data needed. We assume that this there is no previous dynamic data to be imported. (local computer) ./provision.sh o upload all needed installation files to the server; there will also be (big) data transfers of the static databases. (server) ./install.sh perform the complete installation of shebanq Arrange with your internet provider to let the domain name point to the IP address of the server Other (migrating) \u00b6 You have a server with SHEBANQ running and want to migrate to a new server. (current server) ./backup.sh make a backup of user data (local computer) ./save.sh o save backup to local computer (local computer) ./provision.sh on upload all needed installation files to the server; the backup of the current server will be imported; there will also be (big) data transfers of the static databases. (new server) ./install.sh perform the complete installation of shebanq Arrange with your internet provider to let the domain name point to the IP address of the new server (local computer) Tweak config.sh and put the name of the new server into serverOther . Test \u00b6 The database resides on the test server itself, data operations will be performed. (production server) ./backup.sh make a backup of user data (only to get meaningful content in the databases) (local computer) ./save.sh p save backup to local computer (only to get meaningful content in the databases) (local computer) ./provision.sh t upload all needed installation files to the server; there will also be (big) data transfers of the static databases. (test server) ./install.sh perform the complete installation of shebanq Production (migrating) \u00b6 The database resides on a separate database server, no data operations needed. (current production server) ./backup.sh make a backup of user data (only for safety, if all goes well, we do not need it) (local computer) ./save.sh p save backup from current production server to local computer (only for safety, if all goes well, we do not need it) (local computer) ./provision.sh pn upload all needed installation files to the new production server; the static database files will be skipped. (new production server) ./install.sh perform the complete installation of shebanq Arrange with your internet provider to let the domain name point to the IP address of the new production server (local computer) Tweak config.sh and put the name of the new production server into serverProd . Update SHEBANQ on an existing server \u00b6 This works the same in all situations. We give the steps for the other situation, which is most likely your situation. In all situations, when on the server, you must sudo the invocations of the scripts or run them as root. SHEBANQ code only \u00b6 Do this when you noticed that the SHEBANQ repo has updates. (server) update.sh Pull the SHEBANQ repository from GitHUb That's all. Simple and quick. A version of the static data \u00b6 Do this when a new version of the etcbc data is released or an existing version has got an update. These databases are released through the etcbc/bhsa repository on GitHub, in the directory shebanq . You have them in your local clone of the BHSA. Below, version is the desired data version that you want to import, such as 4 , 4b , c , 2017 , 2021 . (local computer) git pull origin master Do this in your clone of the BHSA repository. And then again in your clone of the SHEBANQ repository (local computer) ./provision.sh o --static version upload all needed data files files to the server; (server) install.sh --static version This imports both the shebanq_passage and shebanq_etcbc databases of that version. Emdros \u00b6 Do this when you noticed that there is a new version of Emdros. In that case, the SHEBANQ repository contains all that is necessary. (local computer) git pull origin master Do this in your clone of the SHEBANQ repository. (local computer) Tweak config.sh Adapt the EMDROS_VERSION variable so that it reflects the Emdros version in question. (local computer) ./provision.sh o --emdros Only transfer the new Emdros distribution. (server) ./install.sh --emdros Install Emdros only. (server) update.sh Pull the SHEBANQ repository from GitHUb Web2py \u00b6 Do this when you noticed that there is a new version of Web2py and if you are sure that it does not break SHEBANQ. In that case, the SHEBANQ repository contains all that is necessary. (local computer) git pull origin master Do this in your clone of the SHEBANQ repository. (local computer) ./provision.sh o --web2py Only transfer the new Web2py distribution. (server) ./install.sh --web2py Install Web2py only. (server) update.sh Pull the SHEBANQ repository from GitHUb Maintain backups of dynamic data \u00b6 The dynamic data of SHEBANQ is stored in two databases: shebanq_web : user data: names and email addresses and password hashes of registered users. query data: meta data and results of queries that have been saved in shebanq shebanq_note : note data: metadata and content of all notes that have been saved in SHEBANQ. Currently, I make occasional backups of the production SHEBANQ and store them on my local computer, which is backed up in multiple ways, offline and online. Backup dynamic data \u00b6 (server) ./backup.sh This will create a fresh backup of the dynamic data and store it on the server in a folder with a time-stamped name. Also, a symbolic link under the name latest will link to that backup. (local computer) ./save.sh o This will fetch the latest backup from the server to your local computer. It will end up in your backup directory there, under the same time-stamped name, and also with a latest link. Restore dynamic data \u00b6 In cases where a server has crashed and data has been lost, it is necessary to restore the latest known dynamic data. (local computer) ./provision.sh o --dynamic This will find the latest dynamic data backup of the server that exists on your local computer and upload it to the server. (server) ./restore.sh This will find the latest dynamic data backup that exists on the server and import it to the databases. Mixing backups If you maintain multiple servers from your local computers, the backups of all these servers end up in the same place. Production and test backups are kept separate In order to avoid the risk of restoring a backup made on the test server to the production server, backups made on a test server are stored in a different directory. When backups are restored, they will never be taken from this directory, not even when restoring on the test server. If you do need to restore a test backup on the test server, you have to manually copy it over to the right place. The same holds for backups that come from the serverOtherNew and serverProdNew servers. These backups have no importance except for testing the processes, so they will be stored in the alternative place. Trouble shooting \u00b6 It is very difficult to view messages issued by Python code. So far, I have not been able to view them anywhere in the log files. The recommended practice is to install Web2Py and SHEBANQ on your local computer, and debug it there.","title":"Server"},{"location":"deploy/server/#server","text":"This article describes the installation and maintenance of SHEBANQ of a secure RedHat Fedora linux server. Ubuntu If you prefer Ubuntu, that should be easier. You need to change a few things: yum becomes apt-get , the names of installation packages might be slightly different. You can leave out typical selinux commands such as chcon and setsebool . Various locations maybe a little bit different.","title":"Server"},{"location":"deploy/server/#tools","text":"This repository contains a set of shell scripts to perform installation and maintenance tasks on SHEBANQ servers. It also has most of the assets needed for installation. The remaining assets are available through the BHSA repository. Requirements Read first to the end of this document, and take note of the requirements . SELINUX might not be the most obvious choice to host SHEBANQ on, because it is considerably more difficult to work with than Ubuntu. However, there are a few key advantages you enjoy after the installation: prime security You have SHEBANQ running on a top-notch secure system. head-ache-free software updates Much of supporting software (Python, MySQL, Apache) can be updated without the risk of breaking things, because the current versions of them are supported for an extra long time. Often, new security updates are back-ported to older versions, so that you can avoid upgrading to newer but incompatible versions. The latter advantage is quite convenient for SHEBANQ, because the Emdros software is compiled against de MySQL libraries. So when MySQL is upgraded to a new version, Emdros has to be recompiled. And that is something we do not want to do too often.","title":"Tools"},{"location":"deploy/server/#requirements","text":"","title":"Requirements"},{"location":"deploy/server/#server_1","text":"The server on which SHEBANQ is installed is a Security Enhanced Linux Server (SELINUX) . You must be able to access this server by means of ssh and scp , using a certificate , so that you are not prompted for passwords. You must have sudo rights on this server. We assume that the Apache webserver is already installed and: its config files reside in /etc/httpd ; the relevant certificates are installed in /etc/pki/tls/certs and /etc/pki/tls/private mod_wsgi is not yet installed. We assume that the following packages can be installed with yum . That means that you must have the right package repositories enabled. python36 python36-devel python3-markdown mod_wsgi mariadb mariadb-devel mariadb-server","title":"Server"},{"location":"deploy/server/#local-computer","text":"You have cloned the shebanq and bhsa repositories from Github to your local computer: cd ~/github/etcbc git clone https://github.com/etcbc/shebanq git clone https://github.com/etcbc/bhsa If you have cloned these long ago, you can make them up to date by pulling them again: cd ~/github/etcbc/shebanq git pull origin master cd ~/github/etcbc/bhsa git pull origin master You can choose to place the github directory somewhere else, see below, but the structure within the github directory must be as prescribed.","title":"Local computer"},{"location":"deploy/server/#the-_local-directory","text":"The scripts in ~/github/etcbc/scripts/maintenance have generic content. Before working with it, the file configtemplate must be edited to reflect your actual situation. Do this as follows: cd ~/github/etcbc/shebanq/scripts/maintenance ./localize.sh Now you have a directory ~/github/etcbc/shebanq/_local And the command tells you what to do next: copy configtemplate.sh to config.sh edit config.sh What needs to be done is: adapt the serverOther variables to your situation: provide the name of the database host server (typically: localhost) provide passwords for mysql users named shebanq and shebanq_admin ; these users will be created and later in the installation process shebanq_admin is used for importing data, and after installation the webapp will use shebanq to fetch data in response to requests by web users. provide the locations where the https-certificates are installed in Apache; these will be used in in the httpd config file for the webapp. The _local directory is never pushed online (because of the .gitignore file in the shebanq repo), so your local setup remains private. Also, when you tweak files in your _local directory, you can still pull new versions of the shebanq repository without overwriting your local changes. When you run a maintenance script, you should run them from this _local directory, to be sure that you run your adapted version. These local files are also the ones that are sent to the server in the provisioning step below. The scripts can be run from any directory, because they do not depend on the current working directory.","title":"The _local directory"},{"location":"deploy/server/#the-scripts","text":"The originals of the maintenance scripts are in the shebanq repository in the scripts/maintenance directory. In the previous step you have copied them to the _local directory. You can run all scripts with --help to view the options and arguments it accepts. backup.sh Run it on the server. Backs up the databases that have dynamic web data: shebanq_web shebanq_note save.sh Run it on your local computer. It will retrieve data from the server. Saves backups of dynamic web data from the shebanq server to a directory on your local computer where you hold backups. The backup is saved in a subfolder yyyy-mm-ddT-hh-mm-ss (the datetime of the backup). provision.sh Run it on your local computer. It will send data to the server. Copies all files needed for installation from your local computer to the shebanq server. These files end up in shebanq-install under your home directory there. The maintenance scripts themselves will be copied over from your _local directory to your home directory on the server. The latest backup of dynamic data from will be taken from your local computer and copied over to the server. You can run this script in single steps by passing an option. install.sh Run it on the server. Installs required software (MySQL, Python, ModWsgi, Emdros, Web2py, and Shebanq itself) and loads data into the databases. You can run this script in single steps by passing an option. uninstall.sh Run it on the server. Uninstalls what install.sh has installed. You can run this script in single steps by passing an option. restore.sh Run it on the server. Restores the databases that have dynamic web data: shebanq_web shebanq_note They are restored from a previous backup. update.sh Run it on the server. Updates the shebanq webapp, i.e. the web-app as it is hung into the web2py framework.","title":"The scripts"},{"location":"deploy/server/#the-situations","text":"There are several situations, depending on the server that hosts SHEBANQ: Production p url: shebanq.ancient-data.org hosted by DANS on a KNAW server publicly accessible, the one and only offical shebanq website Production (new) pn url: not yet shebanq.ancient-data.org hosted by DANS on a KNAW server, as a successor of the current production server not yet publicly accessible, not yet the one and only offical shebanq website Test t url: test.shebanq.ancient-data.org hosted by DANS on a KNAW server only accessible from within the DANS-KNAW network the one and only offical shebanq test website Other o url: to be configured by you hosted on your server access managed by you an unoffical shebanq website (very welcome, thanks for taking the trouble) Other (new) on url: to be configured by you hosted on your new server, as a successor to your current server access managed by you an unoffical shebanq website","title":"The situations"},{"location":"deploy/server/#the-scenarios","text":"The maintenance scripts can be used in several identified scenarios, which we spell out below. In all situations, when on the server, you must sudo the invocations of the scripts or run them as root. It might be the case, especially on production servers, that you do not have general sudo rights and that the script as a whole can not be run with root privileges. In that case you need to have rights for specific commands to run them under sudo. That is why in some scripts the word sudo still appears. If it does not work for your situation, you can tweak your local copy of the script.","title":"The scenarios"},{"location":"deploy/server/#install-shebanq-on-a-new-server","text":"","title":"Install SHEBANQ on a new server"},{"location":"deploy/server/#situation-other-first-time","text":"This is likely your case: you want to install SHEBANQ on a server of your choice. For the sake of simplicity we assume that the database resides on the server itself and we will transport and import all data needed. We assume that this there is no previous dynamic data to be imported. (local computer) ./provision.sh o upload all needed installation files to the server; there will also be (big) data transfers of the static databases. (server) ./install.sh perform the complete installation of shebanq Arrange with your internet provider to let the domain name point to the IP address of the server","title":"Situation Other (first time)"},{"location":"deploy/server/#other-migrating","text":"You have a server with SHEBANQ running and want to migrate to a new server. (current server) ./backup.sh make a backup of user data (local computer) ./save.sh o save backup to local computer (local computer) ./provision.sh on upload all needed installation files to the server; the backup of the current server will be imported; there will also be (big) data transfers of the static databases. (new server) ./install.sh perform the complete installation of shebanq Arrange with your internet provider to let the domain name point to the IP address of the new server (local computer) Tweak config.sh and put the name of the new server into serverOther .","title":"Other (migrating)"},{"location":"deploy/server/#test","text":"The database resides on the test server itself, data operations will be performed. (production server) ./backup.sh make a backup of user data (only to get meaningful content in the databases) (local computer) ./save.sh p save backup to local computer (only to get meaningful content in the databases) (local computer) ./provision.sh t upload all needed installation files to the server; there will also be (big) data transfers of the static databases. (test server) ./install.sh perform the complete installation of shebanq","title":"Test"},{"location":"deploy/server/#production-migrating","text":"The database resides on a separate database server, no data operations needed. (current production server) ./backup.sh make a backup of user data (only for safety, if all goes well, we do not need it) (local computer) ./save.sh p save backup from current production server to local computer (only for safety, if all goes well, we do not need it) (local computer) ./provision.sh pn upload all needed installation files to the new production server; the static database files will be skipped. (new production server) ./install.sh perform the complete installation of shebanq Arrange with your internet provider to let the domain name point to the IP address of the new production server (local computer) Tweak config.sh and put the name of the new production server into serverProd .","title":"Production (migrating)"},{"location":"deploy/server/#update-shebanq-on-an-existing-server","text":"This works the same in all situations. We give the steps for the other situation, which is most likely your situation. In all situations, when on the server, you must sudo the invocations of the scripts or run them as root.","title":"Update SHEBANQ on an existing server"},{"location":"deploy/server/#shebanq-code-only","text":"Do this when you noticed that the SHEBANQ repo has updates. (server) update.sh Pull the SHEBANQ repository from GitHUb That's all. Simple and quick.","title":"SHEBANQ code only"},{"location":"deploy/server/#a-version-of-the-static-data","text":"Do this when a new version of the etcbc data is released or an existing version has got an update. These databases are released through the etcbc/bhsa repository on GitHub, in the directory shebanq . You have them in your local clone of the BHSA. Below, version is the desired data version that you want to import, such as 4 , 4b , c , 2017 , 2021 . (local computer) git pull origin master Do this in your clone of the BHSA repository. And then again in your clone of the SHEBANQ repository (local computer) ./provision.sh o --static version upload all needed data files files to the server; (server) install.sh --static version This imports both the shebanq_passage and shebanq_etcbc databases of that version.","title":"A version of the static data"},{"location":"deploy/server/#emdros","text":"Do this when you noticed that there is a new version of Emdros. In that case, the SHEBANQ repository contains all that is necessary. (local computer) git pull origin master Do this in your clone of the SHEBANQ repository. (local computer) Tweak config.sh Adapt the EMDROS_VERSION variable so that it reflects the Emdros version in question. (local computer) ./provision.sh o --emdros Only transfer the new Emdros distribution. (server) ./install.sh --emdros Install Emdros only. (server) update.sh Pull the SHEBANQ repository from GitHUb","title":"Emdros"},{"location":"deploy/server/#web2py","text":"Do this when you noticed that there is a new version of Web2py and if you are sure that it does not break SHEBANQ. In that case, the SHEBANQ repository contains all that is necessary. (local computer) git pull origin master Do this in your clone of the SHEBANQ repository. (local computer) ./provision.sh o --web2py Only transfer the new Web2py distribution. (server) ./install.sh --web2py Install Web2py only. (server) update.sh Pull the SHEBANQ repository from GitHUb","title":"Web2py"},{"location":"deploy/server/#maintain-backups-of-dynamic-data","text":"The dynamic data of SHEBANQ is stored in two databases: shebanq_web : user data: names and email addresses and password hashes of registered users. query data: meta data and results of queries that have been saved in shebanq shebanq_note : note data: metadata and content of all notes that have been saved in SHEBANQ. Currently, I make occasional backups of the production SHEBANQ and store them on my local computer, which is backed up in multiple ways, offline and online.","title":"Maintain backups of dynamic data"},{"location":"deploy/server/#backup-dynamic-data","text":"(server) ./backup.sh This will create a fresh backup of the dynamic data and store it on the server in a folder with a time-stamped name. Also, a symbolic link under the name latest will link to that backup. (local computer) ./save.sh o This will fetch the latest backup from the server to your local computer. It will end up in your backup directory there, under the same time-stamped name, and also with a latest link.","title":"Backup dynamic data"},{"location":"deploy/server/#restore-dynamic-data","text":"In cases where a server has crashed and data has been lost, it is necessary to restore the latest known dynamic data. (local computer) ./provision.sh o --dynamic This will find the latest dynamic data backup of the server that exists on your local computer and upload it to the server. (server) ./restore.sh This will find the latest dynamic data backup that exists on the server and import it to the databases. Mixing backups If you maintain multiple servers from your local computers, the backups of all these servers end up in the same place. Production and test backups are kept separate In order to avoid the risk of restoring a backup made on the test server to the production server, backups made on a test server are stored in a different directory. When backups are restored, they will never be taken from this directory, not even when restoring on the test server. If you do need to restore a test backup on the test server, you have to manually copy it over to the right place. The same holds for backups that come from the serverOtherNew and serverProdNew servers. These backups have no importance except for testing the processes, so they will be stored in the alternative place.","title":"Restore dynamic data"},{"location":"deploy/server/#trouble-shooting","text":"It is very difficult to view messages issued by Python code. So far, I have not been able to view them anywhere in the log files. The recommended practice is to install Web2Py and SHEBANQ on your local computer, and debug it there.","title":"Trouble shooting"},{"location":"server/","text":"Server \u00b6 This is the part of SHEBANQ that works on the server. It consists of controllers that are triggered by urls. The actual work of the controllers is implemented in the modules. The result of that work is data, in the form of dictionaries. These dictionaries are fed into views, which are chunks of HTML with placeholders that are filled by the key value pairs in the dictionary.","title":"Intro"},{"location":"server/#server","text":"This is the part of SHEBANQ that works on the server. It consists of controllers that are triggered by urls. The actual work of the controllers is implemented in the modules. The result of that work is data, in the form of dictionaries. These dictionaries are fed into views, which are chunks of HTML with placeholders that are filled by the key value pairs in the dictionary.","title":"Server"},{"location":"server/controllers/","text":"Controllers \u00b6 The controllers can be grouped as follows.","title":"Controllers"},{"location":"server/controllers/#controllers","text":"The controllers can be grouped as follows.","title":"Controllers"},{"location":"server/models/","text":"Models \u00b6 The code in the models define the database connections and define other data related global variables.","title":"Models"},{"location":"server/models/#models","text":"The code in the models define the database connections and define other data related global variables.","title":"Models"},{"location":"server/modules/","text":"Modules \u00b6 Modules perform dedicated data retrieval and composition tasks. These tasks have been delegated to them by the controllers. Test test","title":"Modules"},{"location":"server/modules/#modules","text":"Modules perform dedicated data retrieval and composition tasks. These tasks have been delegated to them by the controllers. Test test","title":"Modules"},{"location":"server/views/","text":"Views \u00b6 The HTML generation takes place in the views, based on data supplied by the controllers in template variables. Nevertheless, there is also a fair bit of HTML generation at the client side, done by Javascript.","title":"Views"},{"location":"server/views/#views","text":"The HTML generation takes place in the views, based on data supplied by the controllers in template variables. Nevertheless, there is also a fair bit of HTML generation at the client side, done by Javascript.","title":"Views"},{"location":"topics/elements/","text":"Elements of the page \u00b6 We give an overview of the elements of a typical shebanq page, and we will name the different parts. These concepts will recur in the discussion of the code, whether it is Python, Javascript, CSS, HTML or SQL. A good introduction into the kinds of pages is the menubar. Main pages \u00b6 Here is the There are several kinds of main pages text pages have Hebrew text material words presents the lexicon queries presents the family of saved queries, organized by organization, project and user notes presents the family of saved notes, organized by organization, project and user The text pages are the bread and butter of shebanq, they are subdivided into two kinds: material pages show a chapter of the Hebrew Bible: the left sidebar may show related words, queries, notes the main area shows the text of the chapter, as a list of its verses; record pages show an individual word , query , or note set ; we use the term record to refer to an individual word, query or note set. the left sidebar shows the characteristics of the record, depending on the type of the record, the main area shows the verses that belong to that record, as a list of verses, being: for a word, the verses where it occurs; for a query, shows the verses where it has results; for a note set, the verses where it has members. Text pages in detail \u00b6 All text pages have a left side bar and a main area. Both areas have a header which contains verious controls that influence the selection and presentation of the content. Controls \u00b6 text page, above main area documentation : a link to the documentation of the BHSA, where one can consult the ETCBC features , which is another name for their linguistic annotations. version : switch between the available versions of the Hebrew Bible. Versions differ not so much in text content as well in the linguistic annotations. Supplying linguistic annotations is ongoing work for the ETCBC. language : swithc between languages in which the names of the books of the bible are presented. text-presentation select hebrew script or phonetic script tabbed-style select normal running text, or one of several tabular formats. The tabular formats present the text by clause atom , one clause atom per line, with extra syntactic information added Notes : with notes displayed Syntax : with indentation according to linguistic embedding Abstract : with letter mapped to just a few symbols text-material page only, above main area external links : Each chapter has a link to the same chapter in other tools, such as Bible Online Learner and ParaBible . passage : a book selector (click on Genesis to select from a list of books) a chapter selector (click on 1 to select from a list of chapters) Content \u00b6 The main area presents a verse list.","title":"Elements"},{"location":"topics/elements/#elements-of-the-page","text":"We give an overview of the elements of a typical shebanq page, and we will name the different parts. These concepts will recur in the discussion of the code, whether it is Python, Javascript, CSS, HTML or SQL. A good introduction into the kinds of pages is the menubar.","title":"Elements of the page"},{"location":"topics/elements/#main-pages","text":"Here is the There are several kinds of main pages text pages have Hebrew text material words presents the lexicon queries presents the family of saved queries, organized by organization, project and user notes presents the family of saved notes, organized by organization, project and user The text pages are the bread and butter of shebanq, they are subdivided into two kinds: material pages show a chapter of the Hebrew Bible: the left sidebar may show related words, queries, notes the main area shows the text of the chapter, as a list of its verses; record pages show an individual word , query , or note set ; we use the term record to refer to an individual word, query or note set. the left sidebar shows the characteristics of the record, depending on the type of the record, the main area shows the verses that belong to that record, as a list of verses, being: for a word, the verses where it occurs; for a query, shows the verses where it has results; for a note set, the verses where it has members.","title":"Main pages"},{"location":"topics/elements/#text-pages-in-detail","text":"All text pages have a left side bar and a main area. Both areas have a header which contains verious controls that influence the selection and presentation of the content.","title":"Text pages in detail"},{"location":"topics/elements/#controls","text":"text page, above main area documentation : a link to the documentation of the BHSA, where one can consult the ETCBC features , which is another name for their linguistic annotations. version : switch between the available versions of the Hebrew Bible. Versions differ not so much in text content as well in the linguistic annotations. Supplying linguistic annotations is ongoing work for the ETCBC. language : swithc between languages in which the names of the books of the bible are presented. text-presentation select hebrew script or phonetic script tabbed-style select normal running text, or one of several tabular formats. The tabular formats present the text by clause atom , one clause atom per line, with extra syntactic information added Notes : with notes displayed Syntax : with indentation according to linguistic embedding Abstract : with letter mapped to just a few symbols text-material page only, above main area external links : Each chapter has a link to the same chapter in other tools, such as Bible Online Learner and ParaBible . passage : a book selector (click on Genesis to select from a list of books) a chapter selector (click on 1 to select from a list of chapters)","title":"Controls"},{"location":"topics/elements/#content","text":"The main area presents a verse list.","title":"Content"}]}